1	What is cellular Automaton?
2	Background

1  What is Cellulair Automaton?

Cellulair Automaton is a behaviour to expiriment with the phenomenon of the same name. 
Basically all you can do with it is generate cool pictures.

Cellulair Automaton generates pictures starting with a line, generating the next line from that and so on, working downwards. It calculates the (color) value of each pixel using the values of the pixels straight above it and to the left and right of that same pixel.

The first line in the image is generated by setting a number of pixels to the maximum value, the rest are set to zero. Which pixels are set to maximum value is determined by to the settings made in the behaviour property dialog.
Cellulair Automaton uses simple algorithms to calculate each next line.

Every possible value of a pixel is represented by one color of the palette, the number of colors and thus the number of possible values can also be set by the user.

Although the patterns evolving on the screen originate from a finite number of initial circumstances, they quickly reach a stage where their development seems completely unpredictable, without becoming completely chaotic.


2  Background

This program originated somewhere around 1986 written in in MS Basic on an Amiga 500. I remembered seeing a picture in some 70's book on 'Supercomputers' with a short explanation of how it was generated (probably on one of the fastest computers of the period). Sure enough I couldn't find the book anymore, but I decided to have a go at trying to reproduce the kind of picture I remembered. The resulting program worked with 32 colors only, and took about 20 minutes to generate an image of 320 x 256 pixels. Though it made interesting pictures, it took such a long time that I eventually lost interest. I didn't even keep the source of the program when I sold the Amiga, to my later regret.

Quite a few years later I read the book "Artificial life", by Stephen Levy. This book is interesting for many more reasons, but it also contained a description of Cellular Automatons, and it rekindled my interest in the concept. I just aquired a copy of Think C, so I figured I'd try and see if I could get a version working in C.
Eventually I managed to generate the same kind of output as with my Amiga program, but I never got to the point that I could produce a properly working stable program, I decided I wasn't enough of a programmer to work with C, and the project was shelved for the second time.

Then REALBasic came around. Finally I was able to produce something stable with a proper user interface.  Even better: the REALBasic version seems to be even faster than the C version. 

Then Imaging Lingo came into existence. I ported the core code from my REAL Basic program in about half an hour to a functioning Lingo behavior. Though this is nowhere near as fast as REALBasic, something the Lingo interpreter is largely responsible for, the advantage is that you can combine Imaging Lingo with various other cool Director features, such as sprite rotation, score inks and quads.

If there is interest, I may publish the source code.
Have fun!

Mark Hagers